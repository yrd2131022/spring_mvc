<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	">



	<!-- 1.Controller的组件扫描 -->
	<context:component-scan
		base-package="com.yrd.spring_mvc" use-default-filters="false">
		<!-- 组件扫描时，只扫com.yrd包下的@Controller注解 ,主要是为了避免重复扫描 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>



	<!-- 2.配置内部资源-视图解析器 -->
	<!-- @RequestMapping("/quick")//映射地址 public String save() { System.out.println("Controller 
		save running...."); return "/jsp/success.jsp"; } 配置后，return就可以写成：return "success"; -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 设置前缀 -->
		<property name="prefix" value="/jsp/"></property>
		<!-- 设置后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	

	


	<!-- 配置处理器映射器 如果mvc的注解驱动（已经默认集成了jackjson） 配置了，这里不可以单独配置 -->
	<!-- (messageConverters) 期望springMVC自动将User对象转换成Json格式的字符串UserController.java/quick10 -->
<!-- 	<bean -->
<!-- 		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> -->
<!-- 		<property name="messageConverters"> -->
<!-- 			<list> -->
<!-- 				<bean -->
<!-- 					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<!-- 3.在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，
	配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置。
	mvc的注解驱动：
	<mvc:annotation-driven/>
	 -->
	<mvc:annotation-driven conversion-service="conversionService"/>
	
	
	
	<!--4. 配置文件上传解析器 -->
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<!-- 这里id必须是 id="multipartResolver" -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 文件大小最大值 1g -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />

	</bean>
	
	
	
	<!-- ===start ==以下二选一===== -->
	<!-- 不需要通过SpringMVC的前端控制器 ，让客户端直接访问到-->
	<!-- 对静态资源的处理,再springMVC中，开放资源的访问(让客户端直接访问到) -->
	<!-- <mvc:resources location="/js/" mapping="/js/**"></mvc:resources> -->
	<!-- <mvc:resources location="/img/" mapping="/img/**"></mvc:resources> -->

	<!-- 5.对静态资源的处理,mvc框架找不到资源，就交给原始容器(tomcat)去找 -->
	<mvc:default-servlet-handler />
	<!-- ===end ==以上二选一===== -->
	
	
	<!-- 声明转换器,自定义的(String====>Date) -->
	<!-- 再将自定义的日期转换器添加到mvc的注解驱动中 -->
	<bean id="conversionService"
		class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="com.yrd.spring_mvc.converter.DateConverter"></bean>
			</list>
		</property>
	</bean>
	
	<!-- 6.配置拦截器 -->
	<!-- 用于拦截前端控制器分发的请求,不会拦截静态资源 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 对哪些资源执行拦截操作 /** 表示对所有资源拦截/xxx/** -->
			<mvc:mapping path="/**" />
			<!-- 配置哪些资源排除拦截操作,path=为访问路径 -->
			<!-- http://localhost:8080/spring_mvc/userController/quick?param=yes -->
			<mvc:exclude-mapping path="/userController/*" />
			<bean class="com.yrd.spring_mvc.interceptor.MyInterceptor1"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 对哪些资源执行拦截操作 /** 表示对所有资源拦截/xxx/** -->
			<mvc:mapping path="/**" />
			<bean class="com.yrd.spring_mvc.interceptor.MyInterceptor2"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- 配置哪些资源排除拦截操作 -->
			<mvc:exclude-mapping path="/domain/login" />
			<bean class="com.yrd.spring_mvc.interceptor.PrivilegeInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	
	<!-- 7.配置 异常处理器 -->
	<!-- 这里value="error"，就是/jsp/error.jsp -->
<!-- 	<bean -->
<!-- 		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> -->
<!-- 		<property name="defaultErrorView" value="error"></property> -->
<!-- 		<property name="exceptionMappings"> -->
<!-- 			<map> -->
<!-- 				<entry key="java.lang.ClassCastException" value="error1"></entry> -->
<!-- 				<entry key="com.yrd.exception.exception.MyException" value="error2"></entry> -->
<!-- 			</map> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	<!-- 配置自定义的异常处理器 -->
	<bean class="com.yrd.spring_mvc.exception.resolver.MyExceptionResolver"></bean>



</beans>